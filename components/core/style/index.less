@import "../../style/themes/default";

// cdk overlay

.cdk-overlay-container {
  pointer-events: none;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  position: fixed;
  z-index: 1000;
}

.cdk-overlay-backdrop {
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  -webkit-tap-highlight-color: transparent;
  transition: opacity .4s cubic-bezier(.25, .8, .25, 1);
  opacity: 0;
  position: absolute;
  pointer-events: auto;
  z-index: 1000;
}

.cdk-overlay-pane {
  position: absolute;
  pointer-events: auto;
  z-index: 1000; // Give an opportunity to the content own to manage their z-index such as Modal
}

.cdk-overlay-connected-position-bounding-box {
  position: absolute;
  z-index: 1000;
  display: flex;
  flex-direction: column;
  min-width: 1px;
  min-height: 1px;
}

// Used when disabling global scrolling.
.cdk-global-scrollblock {
  position: fixed;

  // Necessary for the content not to lose its width. Note that we're using 100%, instead of
  // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width
  // that the element had before we made it `fixed`.
  width: 100%;

  // Note: this will always add a scrollbar to whatever element it is on, which can
  // potentially result in double scrollbars. It shouldn't be an issue, because we won't
  // block scrolling on a page that doesn't have a scrollbar in the first place.
  overflow-y: scroll;

  // https://github.com/angular/material2/issues/15051
  body {
    overflow-x: visible;
  }
}

.box-shadow-left() {
  .ant-table-th-right-sticky, .ant-table-td-right-sticky {
    box-shadow: -6px 0 6px 0px rgba(0, 0, 0, .05);
  }
}

.box-shadow-right() {
  .ant-table-th-left-sticky, .ant-table-td-left-sticky {
    box-shadow: 6px 0 6px 0px rgba(0, 0, 0, .05);
  }
}

.border-left() {
  .ant-table-th-right-sticky, .ant-table-td-right-sticky {
    border-right: @border-width-base @border-style-base @border-color-split;
  }
}

.border-right() {
  .ant-table-th-left-sticky, .ant-table-td-left-sticky {
    border-left: @border-width-base @border-style-base @border-color-split;
  }
}

.ant-table-scroll-position-middle, .ant-table-scroll-position-left {
  .ant-table-td-right-sticky + .ant-table-td-right-sticky {
    box-shadow: none;
  }

  .ant-table-th-right-sticky + .ant-table-th-right-sticky {
    box-shadow: none;
  }
}


.ant-table-th-left-sticky, .ant-table-th-right-sticky, .ant-table-td-right-sticky, .ant-table-td-left-sticky {
  position: sticky !important;
  z-index: 1;
}

.ant-table-td-left-sticky, .ant-table-td-right-sticky {
  background: @component-background;
}

.ant-table-tbody {
  & > tr {
    &:hover {
      & > td {
        &.ant-table-td-left-sticky {
          background: @table-row-hover-bg;
        }

        &.ant-table-td-right-sticky {
          background: @table-row-hover-bg;
        }
      }
    }
  }
}

.ant-table-scroll-position-middle {
  .box-shadow-right;
  .box-shadow-left;
}

.ant-table-scroll-position-left {
  .box-shadow-left;
}

.ant-table-scroll-position-right {
  .box-shadow-right;
}

.ant-table-bordered {
  &.ant-table-scroll-position-middle {
    .border-right;
    .border-left;
  }

  &.ant-table-scroll-position-left {
    .border-left;
  }

  &.ant-table-scroll-position-right {
    .border-right;
  }
}

// hack tree css
.ant-tree {
  &.ant-tree-show-line {
    > nz-tree-node:not(:last-child), .ant-tree-child-tree > nz-tree-node:not(:last-child) {
      > li:before {
        content: ' ';
        width: 1px;
        border-left: 1px solid @border-color-base;
        height: 100%;
        position: absolute;
        left: 12px;
        margin: 22px 0;
      }
    }

    .ant-tree-child-tree > nz-tree-node:last-child {
      > li:before {
        content: ' ';
        width: 1px;
        border-left: 0px solid @border-color-base;
        height: 100%;
        position: absolute;
        left: 12px;
        margin: 22px 0;
      }
    }
  }

  .font-highlight {
    color: @highlight-color;
  }
}

textarea.cdk-textarea-autosize-measuring {
  height: auto !important;
  overflow: hidden !important;
  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect
  // measurement. We just have to account for it later and subtract it off the final result.
  padding: 2px 0 !important;
  box-sizing: content-box !important;
}
